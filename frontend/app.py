import streamlit as st
import json
import time
from PIL import Image, ImageDraw, ImageFont
import io
from datetime import datetime
import numpy as np
#import src.imgRotator as rotator

def parse_annotations(json_data):
    # Parse the structured fields
    structured_fields = json_data['structured_fields']
    
    # Parse the handwritten text
    handwritten_text = json_data['handwritten_text']
    
    # Parse the signature and seal information
    signature_seal = json_data['signature_seal']
    
    # Combine all the data
    result = {
        'document_type': json.loads(json_data['document_type'].replace("'", '"')),
        'structured_fields': structured_fields,
        'handwritten_texts': handwritten_text['handwritten_texts'],
        'signature_seal': signature_seal
    }
    
    return result

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    page_icon="üìÑ",
    layout="wide"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ CSS
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
    }
    .uploaded-image {
        max-width: 100%;
        height: auto;
    }
    .processing-time {
        background-color: #262730;
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    </style>
""", unsafe_allow_html=True)

#rotator
# def rotate_photo(img):
#     img = Image.open(img)
#     img = np.array(img)
#     return rotator.rotate_image(img)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —à–∞–ø–∫–∞
st.title("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
st.markdown("---")

# –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", type=['png', 'jpg', 'jpeg', 'bmp', 'tiff', 'webp'])

if uploaded_file is not None:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = Image.open(uploaded_file)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
    st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    st.image(image, caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', use_column_width=True)
    st.markdown("---")
    
    # –ù–∞—á–∞–ª–æ –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    start_time = time.time()
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ML
    with st.spinner('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'):
        # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ML
        #time.sleep(13.65)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ML
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        total_processing_time = time.time() - start_time
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ (–º–æ–∫ –æ—Ç–≤–µ—Ç –æ—Ç ML)
        with open('output2.json', 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        parsed_data = parse_annotations(json_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        processed_image = image.copy()
        boxes_image = image.copy()

        draw = ImageDraw.Draw(processed_image)
        boxes_draw = ImageDraw.Draw(boxes_image)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_width, img_height = image.size
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫—Å–æ–≤ –¥–ª—è —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        for text_item in parsed_data['handwritten_texts']:
            bbox = text_item['bbox']  # [left, top, right, bottom] –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            text = text_item['text']
            
            # –†–∏—Å—É–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –∏ —Ç–µ–∫—Å—Ç
            draw.rectangle([bbox[0], bbox[1], bbox[2], bbox[3]], fill="white")
            draw.rectangle([bbox[0], bbox[1], bbox[2], bbox[3]], outline="blue", width=2)
            boxes_draw.rectangle([bbox[0], bbox[1], bbox[2], bbox[3]], outline="blue", width=2)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –≤ –±–æ–∫—Å
            font_size = 1
            font = ImageFont.truetype("Arial.ttf", font_size)
            while True:
                bbox_text = font.getbbox(text)
                text_width = bbox_text[2] - bbox_text[0]
                text_height = bbox_text[3] - bbox_text[1]
                if text_width >= (bbox[2] - bbox[0]) * 0.9 or text_height >= (bbox[3] - bbox[1]) * 0.9:
                    break
                font_size += 1
                font = ImageFont.truetype("Arial.ttf", font_size)
            font_size = max(1, int((font_size - 1) * 0.9))  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1 –∏ –¥–µ–ª–∞–µ–º –Ω–∞ 10% –º–µ–Ω—å—à–µ
            font = ImageFont.truetype("Arial.ttf", font_size)
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            bbox_text = font.getbbox(text)
            text_width = bbox_text[2] - bbox_text[0]
            text_height = bbox_text[3] - bbox_text[1]
            
            # –¢–æ—á–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü —Ç–µ–∫—Å—Ç–∞
            text_x = bbox[0] + (bbox[2] - bbox[0] - text_width) / 2 - bbox_text[0]
            text_y = bbox[1] + (bbox[3] - bbox[1] - text_height) / 2 - bbox_text[1]
            
            draw.text((text_x, text_y), text, fill="black", font=font)
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞
        if parsed_data['signature_seal']['signature_detected']:
            for detail in parsed_data['signature_seal']['details']:
                if 'bbox' in detail:
                    bbox = detail['bbox']
                    draw.rectangle([bbox[0], bbox[1], bbox[2], bbox[3]], outline="blue", width=2)
                    boxes_draw.rectangle([bbox[0], bbox[1], bbox[2], bbox[3]], outline="blue", width=2)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        objects_count = len(parsed_data['handwritten_texts'])
        if parsed_data['signature_seal']['signature_detected']:
            objects_count += len(parsed_data['signature_seal']['details'])
        st.success(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {objects_count}')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        st.subheader("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç")
        show_processed = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", value=False)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        if show_processed:
            st.image(processed_image, caption='–ü–µ—á–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ', use_column_width=True)
        else:
            st.image(boxes_image, caption='–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç', use_column_width=True)
        
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # Display JSON in a collapsible expander
        st.subheader("JSON –æ—Ç–≤–µ—Ç")
        with st.expander("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ JSON"):
            st.json(parsed_data)
            
        # Add download button for JSON
        json_str = json.dumps(parsed_data, indent=2)
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å JSON",
            data=json_str,
            file_name="processing_results.json",
            mime="application/json"
        )
        
        # Move processing time to the bottom
        st.markdown("""
        <div class="processing-time">
            <h3>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
            <p>–û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {:.2f} —Å–µ–∫—É–Ω–¥</p>
        </div>
        """.format(total_processing_time), unsafe_allow_html=True)

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.markdown("T1 case by Meowching learning") 