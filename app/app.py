import streamlit as st
import json
import time
from PIL import Image, ImageDraw, ImageFont
import io
from datetime import datetime
import numpy as np
import cv2
from skimage import io as skio
from skimage.transform import rotate
from skimage.color import rgb2gray
from deskew import determine_skew
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))
from src.infer import process_document, merge_all_results, save_to_json
from src.imgRotat import check_rotation, deskew
from src.imgFilter import ImageProcessor

def parse_annotations(json_data):
    # Parse the document type
    document_type = json_data.get('document_type', {})
    if isinstance(document_type, str):
        try:
            document_type = json.loads(document_type)
        except json.JSONDecodeError:
            document_type = {"document_type": "unknown"}
    
    # Parse the structured fields
    structured_fields = json_data.get('structured_fields', {})
    if isinstance(structured_fields, str):
        try:
            structured_fields = json.loads(structured_fields)
        except json.JSONDecodeError:
            structured_fields = {}
    
    # Parse the handwritten text
    handwritten_text = json_data.get('handwritten_text', {})
    if isinstance(handwritten_text, str):
        try:
            handwritten_text = json.loads(handwritten_text)
        except json.JSONDecodeError:
            handwritten_text = {"handwritten_text": []}
    
    # Parse the signature and seal information
    signature_seal = json_data.get('signature_seal', {})
    if isinstance(signature_seal, str):
        try:
            signature_seal = json.loads(signature_seal)
        except json.JSONDecodeError:
            signature_seal = {"signature_detected": False, "seal_detected": False, "details": []}
    
    # Combine all the data
    result = {
        'document_type': document_type,
        'structured_fields': structured_fields,
        'handwritten_texts': handwritten_text.get('handwritten_text', []),
        'signature_seal': signature_seal
    }
    
    print("Parsed annotations:", result)  # Debug print
    return result

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    page_icon="üìÑ",
    layout="wide"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ CSS
st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
    }
    .uploaded-image {
        max-width: 100%;
        height: auto;
    }
    .processing-time {
        background-color: #262730;
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    </style>
""", unsafe_allow_html=True)

#rotator
# def rotate_photo(img):
#     img = Image.open(img)
#     img = np.array(img)
#     return rotator.rotate_image(img)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —à–∞–ø–∫–∞
st.title("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
st.markdown("---")

# –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", type=['png', 'jpg', 'jpeg', 'bmp', 'tiff', 'webp'])
if uploaded_file is not None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    processor = ImageProcessor()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = Image.open(uploaded_file)
    processor.set_image(image)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –¥–ª—è –º–æ–¥–µ–ª–∏
    processor.preprocess()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    processed_image_for_model = processor.get_processed_image()
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    processor.rotate_for_display()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_image = Image.fromarray(processor.get_display_image())
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
    st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞)")
    st.image(display_image, caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', use_column_width=True)
    st.markdown("---")
    
    # –ù–∞—á–∞–ª–æ –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    start_time = time.time()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é ML
    with st.spinner('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'):
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            result = process_document(processed_image_for_model)
            print("Process Document Result:", result)  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
            merged_result = merge_all_results(result)
            print("MERGED JSON:", merged_result)  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            total_processing_time = time.time() - start_time
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
            parsed_data = parse_annotations(merged_result)
            print("Parsed Data:", parsed_data)  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            processed_image = display_image.copy()
            boxes_image = display_image.copy()

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
            draw = ImageDraw.Draw(processed_image)
            boxes_draw = ImageDraw.Draw(boxes_image)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_width, img_height = display_image.size
            print(f"Image size: {img_width}x{img_height}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            proc_height, proc_width = processed_image_for_model.shape[:2]
            print(f"Processed image size: {proc_width}x{proc_height}")
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫—Å–æ–≤ –¥–ª—è —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if 'handwritten_texts' in parsed_data and parsed_data['handwritten_texts']:
                print(f"Found {len(parsed_data['handwritten_texts'])} handwritten texts")  # Debug print
                for text_item in parsed_data['handwritten_texts']:
                    try:
                        bbox = text_item.get('bbox', {})
                        print(f"Processing bbox: {bbox}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        
                        if not bbox:
                            print("Skipping item without bbox")
                            continue
                        
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ
                        x_min = int(bbox.get('x_min', 0) * img_width / proc_width)
                        y_min = int(bbox.get('y_min', 0) * img_height / proc_height)
                        x_max = int(bbox.get('x_max', 0) * img_width / proc_width)
                        y_max = int(bbox.get('y_max', 0) * img_height / proc_height)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        x_min = max(0, min(x_min, img_width))
                        y_min = max(0, min(y_min, img_height))
                        x_max = max(0, min(x_max, img_width))
                        y_max = max(0, min(y_max, img_height))
                        
                        print(f"Drawing box at: ({x_min}, {y_min}, {x_max}, {y_max})")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
                        if x_max <= x_min or y_max <= y_min:
                            print(f"Skipping invalid bbox: {bbox}")
                            continue
                            
                        text = text_item.get('text', '')
                        if not text or len(text.strip()) == 0:
                            text = "–¢–µ–∫—Å—Ç"  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        
                        # –†–∏—Å—É–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –∏ —Å–∏–Ω–∏–π –±–æ–∫—Å –Ω–∞ processed_image
                        draw.rectangle([x_min, y_min, x_max, y_max], fill="white")
                        draw.rectangle([x_min, y_min, x_max, y_max], outline="blue", width=3)
                        
                        # –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–Ω–∏–π –±–æ–∫—Å –Ω–∞ boxes_image
                        boxes_draw.rectangle([x_min, y_min, x_max, y_max], outline="blue", width=3)
                        
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞
                        try:
                            font_size = 1
                            font = ImageFont.truetype("Arial", font_size)
                            while True:
                                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞
                                text_width = draw.textlength(text, font=font)
                                bbox_text = font.getbbox(text)
                                text_height = bbox_text[3] - bbox_text[1]
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤ –±–æ–∫—Å
                                if text_width >= (x_max - x_min) * 0.9 or text_height >= (y_max - y_min) * 0.9:
                                    break
                                font_size += 1
                                font = ImageFont.truetype("Arial", font_size)
                            
                            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ 10% –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            font_size = max(1, int((font_size - 1) * 0.9))
                            font = ImageFont.truetype("Arial", font_size)
                            
                            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                            bbox_text = font.getbbox(text)
                            text_width = draw.textlength(text, font=font)
                            text_height = bbox_text[3] - bbox_text[1]
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                            text_x = x_min + (x_max - x_min - text_width) / 2
                            text_y = y_min + (y_max - y_min - text_height) / 2
                            
                            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
                            draw.text((text_x, text_y), text, fill="black", font=font)
                        except Exception as e:
                            print(f"Error processing text: {str(e)}")
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Arial, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
                            font = ImageFont.load_default()
                            text_width = draw.textlength(text, font=font)
                            text_x = x_min + (x_max - x_min - text_width) / 2
                            text_y = y_min + (y_max - y_min - font.getsize(text)[1]) / 2
                            draw.text((text_x, text_y), text, fill="black", font=font)
                        
                    except Exception as e:
                        print(f"Error processing bbox: {str(e)}")
                        continue

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞
            if parsed_data.get('signature_seal', {}).get('signature_detected', False):
                for detail in parsed_data['signature_seal'].get('details', []):
                    if 'bbox' in detail:
                        bbox = detail['bbox']
                        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–º–µ—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ
                        x_min = int(bbox['x_min'] * img_width / proc_width)
                        y_min = int(bbox['y_min'] * img_height / proc_height)
                        x_max = int(bbox['x_max'] * img_width / proc_width)
                        y_max = int(bbox['y_max'] * img_height / proc_height)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        x_min = max(0, min(x_min, img_width))
                        y_min = max(0, min(y_min, img_height))
                        x_max = max(0, min(x_max, img_width))
                        y_max = max(0, min(y_max, img_height))
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
                        if x_max <= x_min or y_max <= y_min:
                            continue
                        
                        # –†–∏—Å—É–µ–º –∫—Ä–∞—Å–Ω—ã–π –±–æ–∫—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
                        boxes_draw.rectangle([x_min, y_min, x_max, y_max], outline="red", width=3)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–ü–æ–¥–ø–∏—Å—å" –Ω–∞–¥ –±–æ–∫—Å–æ–º
                        try:
                            font = ImageFont.truetype("Arial", 12)
                        except:
                            font = ImageFont.load_default()
                        
                        text = "–ü–æ–¥–ø–∏—Å—å"
                        text_width = boxes_draw.textlength(text, font=font)
                        text_height = 15
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if y_min - text_height - 2 >= 0 and x_min + text_width + 4 <= img_width:
                            # –†–∏—Å—É–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                            boxes_draw.rectangle(
                                [x_min, y_min - text_height - 2, x_min + text_width + 4, y_min],
                                fill="white"
                            )
                            
                            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
                            boxes_draw.text((x_min + 2, y_min - text_height), text, fill="red", font=font)
                        else:
                            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É, —Ä–∏—Å—É–µ–º –µ–≥–æ —Å–Ω–∏–∑—É
                            if y_max + text_height + 2 <= img_height and x_min + text_width + 4 <= img_width:
                                boxes_draw.rectangle(
                                    [x_min, y_max, x_min + text_width + 4, y_max + text_height + 2],
                                    fill="white"
                                )
                                boxes_draw.text((x_min + 2, y_max + 2), text, fill="red", font=font)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            objects_count = len(parsed_data.get('handwritten_texts', []))
            if parsed_data.get('signature_seal', {}).get('signature_detected', False):
                objects_count += len(parsed_data['signature_seal'].get('details', []))
            st.success(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {objects_count}')
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            st.subheader("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç")
            show_processed = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", value=False)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
            if show_processed:
                st.image(processed_image, caption='–ü–µ—á–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ', use_column_width=True)
            else:
                st.image(boxes_image, caption='–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç', use_column_width=True)
            
            st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # Display JSON in a collapsible expander
            st.subheader("JSON –æ—Ç–≤–µ—Ç")
            with st.expander("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ JSON"):
                st.json(parsed_data)
                
            # Add download button for JSON
            json_str = json.dumps(parsed_data, indent=2)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å JSON",
                data=json_str,
                file_name="processing_results.json",
                mime="application/json"
            )
            
            # Move processing time to the bottom
            st.markdown("""
            <div class="processing-time">
                <h3>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
                <p>–û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {:.2f} —Å–µ–∫—É–Ω–¥</p>
            </div>
            """.format(total_processing_time), unsafe_allow_html=True)
            
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            print(f"Error details: {str(e)}")

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.markdown("–ö–æ–º–∞–Ω–¥–∞ The Boys") 